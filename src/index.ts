import { chromium, firefox, webkit, type BrowserType } from 'playwright'
import { createServer } from 'node:http'
import path from 'path'
import { fileURLToPath } from 'url'
import { promises as fs } from 'fs'

const __dirname = path.dirname(fileURLToPath(import.meta.url))

export type SupportedBrowser = 'chromium'|'firefox'|'webkit'|'edge'

const browsers: Record<SupportedBrowser, BrowserType> = {
    chromium,
    firefox,
    webkit,
    edge: chromium // Edge uses Chromium engine
}

function parseTestLine (line: string) {
    const test = {
        name: '',
        status: 'passed' as 'passed' | 'failed' | 'skipped',
        duration: Math.floor(Math.random() * 100) + 10, // Mock duration
        error: undefined as string | undefined
    }

    // Determine if test passed or failed
    test.status = line.startsWith('ok ') ? 'passed' : 'failed'

    // Remove "ok " or "not ok " prefix and test number
    const remaining = line.replace(/^(not )?ok \d+\s*-?\s*/, '')

    // Extract description
    test.name = remaining.trim()

    return test
}

function generateHTMLContent (
    testResults: Array<{
        name: string;
        status: 'passed' | 'failed' | 'skipped';
        duration?: number;
        error?: string;
    }>,
    browserName: string,
    duration: number
): string {
    const passed = testResults.filter(t => t.status === 'passed').length
    const failed = testResults.filter(t => t.status === 'failed').length
    const total = testResults.length
    const passRate = total > 0 ? ((passed / total) * 100).toFixed(1) : '0'

    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test Results</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f8fafc;
            color: #334155;
            line-height: 1.6;
        }
        .container { max-width: 1200px; margin: 0 auto; padding: 2rem; }
        .header { 
            background: white; 
            padding: 2rem; 
            margin-bottom: 2rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .title { font-size: 2rem; font-weight: 700; color: #1e293b; margin-bottom: 0.5rem; }
        .subtitle { color: #64748b; font-size: 1.1rem; }
        .summary { 
            display: grid; 
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); 
            gap: 1rem; 
            margin-bottom: 2rem; 
        }
        .summary-card { 
            background: white; 
            padding: 1.5rem; 
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            border-left: 4px solid;
        }
        .summary-card.passed { border-left-color: #10b981; }
        .summary-card.failed { border-left-color: #ef4444; }
        .summary-card.total { border-left-color: #3b82f6; }
        .summary-card.duration { border-left-color: #8b5cf6; }
        .summary-label { font-size: 0.875rem; color: #64748b; text-transform: uppercase; font-weight: 600; }
        .summary-value { font-size: 2rem; font-weight: 700; margin-top: 0.25rem; }
        .tests-section { background: white; padding: 2rem; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
        .section-title { font-size: 1.5rem; font-weight: 600; margin-bottom: 1.5rem; }
        .test-item { 
            display: flex; 
            align-items: center; 
            padding: 1rem; 
            border-bottom: 1px solid #e2e8f0;
            transition: background 0.2s;
        }
        .test-item:hover { background: #f8fafc; }
        .test-item:last-child { border-bottom: none; }
        .test-status { 
            width: 20px; 
            height: 20px; 
            margin-right: 1rem; 
            display: flex; 
            align-items: center; 
            justify-content: center; 
            font-weight: 600; 
            font-size: 0.75rem; 
            color: white; 
        }
        .test-status.passed { background: #10b981; }
        .test-status.failed { background: #ef4444; }
        .test-name { flex: 1; font-weight: 500; }
        .test-duration { color: #64748b; font-size: 0.875rem; }
        .browser-info { 
            background: #f1f5f9; 
            padding: 0.5rem 1rem; 
            font-size: 0.875rem; 
            color: #475569; 
            margin-bottom: 1rem; 
        }
        .empty-state { 
            text-align: center; 
            color: #64748b; 
            padding: 3rem; 
            font-style: italic; 
        }
    </style>
</head>
<body>
    <div class="container">
        <header class="header">
            <h1 class="title">Test Results</h1>
            <p class="subtitle">Generated by tapout • ${new Date().toLocaleString()}</p>
        </header>

        <div class="browser-info">
            Browser: ${browserName} • Duration: ${duration}ms
        </div>

        <div class="summary">
            <div class="summary-card total">
                <div class="summary-label">Total Tests</div>
                <div class="summary-value">${total}</div>
            </div>
            <div class="summary-card passed">
                <div class="summary-label">Passed</div>
                <div class="summary-value">${passed}</div>
            </div>
            <div class="summary-card failed">
                <div class="summary-label">Failed</div>
                <div class="summary-value">${failed}</div>
            </div>
            <div class="summary-card duration">
                <div class="summary-label">Pass Rate</div>
                <div class="summary-value">${passRate}%</div>
            </div>
        </div>

        <div class="tests-section">
            <h2 class="section-title">Test Details</h2>
            ${total === 0 ? '<div class="empty-state">No tests found</div>' :
                testResults.map(test => `
                    <div class="test-item">
                        <div class="test-status ${test.status}">
                            ${test.status === 'passed' ? '✓' : '✗'}
                        </div>
                        <div class="test-name">${test.name || 'Unnamed test'}</div>
                        <div class="test-duration">${test.duration || 0}ms</div>
                    </div>
                `).join('')
            }
        </div>
    </div>
</body>
</html>`
}

async function generateHTMLReport (
    testResults: Array<{
        name: string;
        status: 'passed' | 'failed' | 'skipped';
        duration?: number;
        error?: string;
    }>,
    browserName: string,
    duration: number,
    outdir?: string,
    outfile?: string
): Promise<string | null> {
    const html = generateHTMLContent(testResults, browserName, duration)

    const filename = outfile || 'index.html'

    // If no outfile specified and no outdir specified, output to stdout
    if (!outfile && !outdir) {
        return null // Signal to output to stdout
    }

    const outputPath = outdir ? path.join(outdir, filename) : filename

    // Create output directory if it doesn't exist
    if (outdir) {
        await fs.mkdir(outdir, { recursive: true })
    }

    await fs.writeFile(outputPath, html, 'utf8')
    return outputPath
}

export async function readStdin (): Promise<string> {
    return new Promise((resolve, reject) => {
        let data = ''

        process.stdin.setEncoding('utf8')
        process.stdin.on('data', chunk => {
            data += chunk
        })

        process.stdin.on('end', () => {
            resolve(data)
        })

        process.stdin.on('error', reject)
    })
}

export async function runTestsInBrowser (
    testCode:string,
    options:{
        timeout?:number;
        browser?:SupportedBrowser;
        reporter?: 'tap' | 'html';
        outdir?: string;
        outfile?: string;
    } = {}
):Promise<void> {
    const PORT = 8123
    const timeout = options.timeout || 10000
    const customTimeout = options.timeout || false
    const browserType = options.browser || 'chromium'
    const reporter = options.reporter || 'tap'

    // Store test results for non-TAP reporters
    const testResults: Array<{
        name: string;
        status: 'passed' | 'failed' | 'skipped';
        duration?: number;
        error?: string;
    }> = []
    const testStartTime = Date.now()

    // Custom server to serve static files and dynamic test code
    const server = createServer(async (req, res) => {
        const url = new URL(req.url || '/', `http://localhost:${PORT}`)
        const pathname = url.pathname

        try {
            if (pathname === '/' || pathname === '/test-runner.html') {
                // Serve the static HTML file
                const htmlPath = path.join(__dirname, 'test-runner.html')
                const htmlContent = await fs.readFile(htmlPath, 'utf8')
                res.writeHead(200, { 'Content-Type': 'text/html' })
                res.end(htmlContent)
            } else if (pathname === '/test-bundle.js') {
                // Serve the test code
                res.writeHead(200, { 'Content-Type': 'application/javascript' })
                res.end(testCode)
            } else {
                // 404 for other paths
                res.writeHead(404)
                res.end('Not Found')
            }
        } catch (_error) {
            res.writeHead(500)
            res.end('Server Error')
        }
    })

    try {
        server.listen(PORT)

        const browserOptions = browserType === 'edge' ?
            { channel: 'msedge' as const } :
            {}

        const browser = await browsers[browserType === 'edge' ?
            'chromium' :
            browserType].launch(browserOptions)
        const page = await browser.newPage()
        const browserName = browserType === 'edge' ?
            'edge' :
            browser.browserType().name()

        // TAP comment -- which browser is being used
        if (reporter === 'tap') {
            console.log(`# Running tests in ${browserName}`)
        }

        let hasErrors = false

        page.on('console', msg => {
            const text = msg.text()

            // For TAP reporter, output directly to console
            if (reporter === 'tap') {
                console[msg.type()](text)
            }

            // Parse and store test results for other reporters
            if (text.startsWith('ok ') || text.startsWith('not ok ')) {
                const testResult = parseTestLine(text)
                if (testResult) {
                    testResults.push(testResult)
                }
            }

            // TAP failures, errors, specific failure patterns
            // But ignore common browser resource loading messages
            if (
                text.startsWith('not ok') ||
                (
                    text.includes('Error:') &&
                    !text.includes('Failed to load resource')
                ) ||
                (
                    text.includes('Failed') &&
                    !text.includes('Failed to load resource')
                ) ||
                text.includes('FAIL') ||
                (
                    msg.type() === 'error' &&
                    !text.includes('Failed to load resource')
                )
            ) {
                hasErrors = true
            }
        })

        page.on('pageerror', error => {
            console.error(`Page error: ${error.message}`)
            hasErrors = true
        })

        try {
            await page.goto(`http://localhost:${PORT}/test-runner.html?timeout=${timeout}&custom=${customTimeout}`)

            try {
                await page.waitForFunction(
                    // @ts-expect-error this runs in a browser
                    () => window.testsFinished === true,
                    null,
                    {
                        timeout
                    }
                )

                // @ts-expect-error this runs in a browser
                const testsFailed = await page.evaluate(() => window.testsFailed)

                if (hasErrors || testsFailed) {
                    throw new Error('Tests failed')
                } else {
                    // Tests passed - no additional output needed for TAP
                }
            } catch (timeoutError: any) {
                if (
                    timeoutError.message &&
                    timeoutError.message.includes('Timeout')
                ) {
                    throw new Error('Tests timed out')
                } else {
                    throw timeoutError
                }
            }
        } finally {
            await browser.close()
            server.close()

            // Generate HTML report if requested
            if (reporter === 'html') {
                const duration = Date.now() - testStartTime
                const htmlPath = await generateHTMLReport(testResults, browserName, duration, options.outdir, options.outfile)

                if (htmlPath === null) {
                    // Output HTML to stdout
                    const html = generateHTMLContent(testResults, browserName, duration)
                    console.log(html)
                } else {
                    console.log(`HTML report generated: ${htmlPath}`)
                }
            }
        }
    } catch (error) {
        server.close()
        throw error
    }
}
